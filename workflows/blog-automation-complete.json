{
  "name": "YouTube to Blog Automation Complete",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-to-blog",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "qs": {
          "parameters": [
            {
              "name": "id",
              "value": "={{$json[\"videoId\"]}}"
            },
            {
              "name": "part",
              "value": "snippet,contentDetails,statistics"
            },
            {
              "name": "key",
              "value": "={{$env[\"YOUTUBE_API_KEY\"]}}"
            }
          ]
        }
      },
      "id": "youtube-fetch",
      "name": "Fetch YouTube Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "https://api.notegpt.io/v1/youtube/summarize",
        "method": "POST",
        "headers": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env[\"NOTEGPT_API_KEY\"]}}"
            }
          ]
        },
        "body": {
          "videoUrl": "https://youtube.com/watch?v={{$json[\"items\"][0][\"id\"]}}",
          "language": "ko"
        }
      },
      "id": "notegpt-summarize",
      "name": "NoteGPT Summarize",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [650, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a professional blog writer. Create an engaging, SEO-optimized blog post in Korean based on the YouTube video summary. Include: 1) Catchy title 2) Introduction 3) Main content with headers 4) Key takeaways 5) Conclusion. Make it informative and engaging."
            },
            {
              "role": "user",
              "content": "Video Title: {{$node[\"youtube-fetch\"].json[\"items\"][0][\"snippet\"][\"title\"]}}\n\nSummary: {{$node[\"notegpt-summarize\"].json[\"summary\"]}}\n\nCreate a comprehensive blog post."
            }
          ]
        }
      },
      "id": "openai-generate",
      "name": "Generate Blog Content",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "url": "{{$env[\"WORDPRESS_URL\"]}}/wp-json/wp/v2/posts",
        "method": "POST",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "wordpressApi",
        "body": {
          "title": "={{$json[\"blogTitle\"]}}",
          "content": "={{$json[\"blogContent\"]}}",
          "status": "publish",
          "categories": "[1]",
          "tags": "={{$json[\"tags\"]}}",
          "featured_media": "={{$json[\"thumbnailId\"]}}"
        }
      },
      "id": "wordpress-publish",
      "name": "Publish to WordPress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "url": "https://graph.facebook.com/v17.0/{{$env[\"INSTAGRAM_ACCOUNT_ID\"]}}/media",
        "method": "POST",
        "body": {
          "image_url": "={{$json[\"thumbnailUrl\"]}}",
          "caption": "={{$json[\"instagramCaption\"]}}",
          "access_token": "={{$env[\"INSTAGRAM_ACCESS_TOKEN\"]}}"
        }
      },
      "id": "instagram-create",
      "name": "Create Instagram Media",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "functionCode": "// Process and format data\nconst videoData = $node[\"youtube-fetch\"].json.items[0];\nconst summary = $node[\"notegpt-summarize\"].json;\nconst aiContent = $node[\"openai-generate\"].json.choices[0].message.content;\n\n// Parse AI generated content\nconst lines = aiContent.split('\\n');\nconst blogTitle = lines[0].replace(/^#\\s*/, '');\nconst blogContent = lines.slice(1).join('\\n');\n\n// Generate Instagram caption\nconst instagramCaption = `${videoData.snippet.title}\\n\\n${summary.keyPoints.slice(0, 3).join('\\n')}\\n\\nüîó ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ Î∏îÎ°úÍ∑∏ÏóêÏÑú!\\n\\n#Î∏îÎ°úÍ∑∏ #Ïú†ÌäúÎ∏åÏöîÏïΩ #ÏûêÎèôÌôî`;\n\n// Extract tags\nconst tags = videoData.snippet.tags ? videoData.snippet.tags.slice(0, 5) : [];\n\nreturn {\n  blogTitle,\n  blogContent,\n  instagramCaption,\n  tags,\n  thumbnailUrl: videoData.snippet.thumbnails.high.url,\n  videoUrl: `https://youtube.com/watch?v=${videoData.id}`,\n  publishDate: new Date().toISOString()\n};"
      },
      "id": "process-content",
      "name": "Process Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [950, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"wordpress-publish\"].json[\"id\"]}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Blog post and Instagram post created successfully"
            }
          ],
          "number": [
            {
              "name": "wordpressId",
              "value": "={{$node[\"wordpress-publish\"].json[\"id\"]}}"
            }
          ]
        }
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1450, 250]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "error"
            },
            {
              "name": "message",
              "value": "Failed to create blog post"
            }
          ]
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1450, 350]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "youtube-fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "youtube-fetch": {
      "main": [
        [
          {
            "node": "notegpt-summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "notegpt-summarize": {
      "main": [
        [
          {
            "node": "openai-generate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-generate": {
      "main": [
        [
          {
            "node": "process-content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-content": {
      "main": [
        [
          {
            "node": "wordpress-publish",
            "type": "main",
            "index": 0
          },
          {
            "node": "instagram-create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wordpress-publish": {
      "main": [
        [
          {
            "node": "check-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-success": {
      "main": [
        [
          {
            "node": "success-response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler-workflow"
  }
}